d <- 1
pathSimulation <- paste(dir_list_table[d], "FullData", sep = "/")
filesInFolder <- list.files(pathSimulation)
filesInFolder
pathCSV <- "UNIFR/Master_thesis/Scripts/csv/"
#SimulationsInFolder <- loadReplicates(1, filesInFolder, pathCSV)
CSVinFolder <- list.files(path = pathCSV, pattern = "*.csv")
CSVname <- unique(gsub("\\.csv", "", CSVinFolder))
pathSimulation <- paste(dir_list_table[d], "FullData", sep = "/")
filesInFolder <- list.files(pathSimulation)
pathCSV <- "UNIFR/Master_thesis/Scripts/csv/"
#SimulationsInFolder <- loadReplicates(1, filesInFolder, pathCSV)
CSVinFolder <- list.files(path = pathCSV, pattern = "*.csv")
CSVname <- unique(gsub("\\.csv", "", CSVinFolder))
dir_list_table[d]
dir.create(paste(dir_list_table[d], "DataDistribution", sep = "/"), showWarnings = FALSE)
pathSave <- paste(dir_list_table[d], "DataDistribution", sep = "/")
c <- 1
SimulationsInFolder <- loadReplicates(c, filesInFolder, pathCSV)
randomSimulation <- sample(length(SimulationsInFolder), 1)
randomSimulation
SimulationsInFolder
SimulationsInFolder <- loadReplicates(CSVinFolder[c], filesInFolder, pathCSV)
SimulationsInFolder
csvFiles
filesInFolder <- list.files(pathSimulation)
filesInFolder
c
SimulationsInFolder <- loadReplicates(c, filesInFolder, pathCSV)
SimulationsInFolder
CSVinFolder
length(filesInFolder)
filesInFolder
SimulationsInFolder <- loadReplicates(c, filesInFolder, pathCSV)
length(SimulationsInFolder)
SimulationsInFolder <- SimulationsInFolder[str_detect(SimulationsInFolder, paste0(csvName[file], "_"))]
SimulationsInFolder <- SimulationsInFolder[str_detect(SimulationsInFolder, paste0(CSVnameName[file], "_"))]
SimulationsInFolder <- SimulationsInFolder[str_detect(SimulationsInFolder, paste0(CSVname[file], "_"))]
SimulationsInFolder
paste0(CSVname[file], "_")
SimulationsInFolder <- loadReplicates(c, filesInFolder, pathCSV)
SimulationsInFolder <- SimulationsInFolder[str_detect(SimulationsInFolder, paste0(CSVname[c], "_"))]
SimulatioinsInFolder
randomSimulation <- sample(length(SimulationsInFolder), 1)
simDataName <- unique(gsub("\\.RData", "", SimulationsInFolder))
pattern = "simulatedData"
simDataName <- str_remove(simDataName, pattern)
for(r in randomSimulation){
simData <- get(load(paste0(pathSimulation, "/", SimulationsInFolder[r])))
tree <- simData$TreeList$`0`
traits <- simData$FinalData
traitsConti <- grep("F.", names(traits))
traitsDisc <- grep("I.", names(traits))
if(length(traitsConti) != 0){
namesImage <- paste0("ContiDist", simDataName[d], ".pdf")
phylo.heatmap(tree, traits[, traitsConti], standardize=TRUE, split=c(0.7,0.3), fsize=c(0.4,0.8,0.8))
#title(main = paste(namesImage, "Conti"))
}
if(length(traitsDisc) != 0){
namesImage <- paste0("TraitsDist", simDataName[d], ".pdf")
dotTree(ladderize(tree), traits[, traitsDisc], legend = FALSE,
standardize = FALSE, fsize = 0.3)
#title(main = paste(namesImage, "Discr"))
}
}
for(r in randomSimulation){
simData <- get(load(paste0(pathSimulation, "/", SimulationsInFolder[r])))
tree <- simData$TreeList$`0`
traits <- simData$FinalData
traitsConti <- grep("F.", names(traits))
traitsDisc <- grep("I.", names(traits))
if(length(traitsConti) != 0){
namesImage <- paste0("ContiDist", simDataName[d], ".pdf")
phylo.heatmap(tree, traits[, traitsConti], standardize=TRUE, split=c(0.7,0.3), fsize=c(0.4,0.8,0.8))
#title(main = paste(namesImage, "Conti"))
}
if(length(traitsDisc) != 0){
namesImage <- paste0("TraitsDist", simDataName[d], ".pdf")
dotTree(ladderize(tree), traits[, traitsDisc], legend = TRUE,
standardize = FALSE, fsize = 0.3)
#title(main = paste(namesImage, "Discr"))
}
}
pathSimulation <- paste(dir_list_table[d], "FullData", sep = "/")
filesInFolder <- list.files(pathSimulation)
pathCSV <- "UNIFR/Master_thesis/Scripts/csv/"
#SimulationsInFolder <- loadReplicates(1, filesInFolder, pathCSV)
CSVinFolder <- list.files(path = pathCSV, pattern = "*.csv")
CSVname <- unique(gsub("\\.csv", "", CSVinFolder))
dir.create(paste(dir_list_table[d], "DataDistribution", sep = "/"), showWarnings = FALSE)
pathSave <- paste(dir_list_table[d], "DataDistribution", sep = "/")
CSVinFolder
for(c in 1:(length(CSVinFolder))){
SimulationsInFolder <- loadReplicates(c, filesInFolder, pathCSV)
SimulationsInFolder <- SimulationsInFolder[str_detect(SimulationsInFolder, paste0(CSVname[c], "_"))]
randomSimulation <- sample(length(SimulationsInFolder), 1)
simDataName <- unique(gsub("\\.RData", "", SimulationsInFolder))
pattern = "simulatedData"
simDataName <- str_remove(simDataName, pattern)
pdf(paste0(pathSave, "/", CSVname[c],"_SimulatedDataDist", ".pdf"), width = 10, height = 7)
for(r in randomSimulation){
simData <- get(load(paste0(pathSimulation, "/", SimulationsInFolder[r])))
tree <- simData$TreeList$`0`
traits <- simData$FinalData
traitsConti <- grep("F.", names(traits))
traitsDisc <- grep("I.", names(traits))
if(length(traitsConti) != 0){
namesImage <- paste0("ContiDist", simDataName[d], ".pdf")
phylo.heatmap(tree, traits[, traitsConti], standardize=TRUE, split=c(0.7,0.3), fsize=c(0.4,0.8,0.8))
#title(main = paste(namesImage, "Conti"))
}
if(length(traitsDisc) != 0){
namesImage <- paste0("TraitsDist", simDataName[d], ".pdf")
dotTree(ladderize(tree), traits[, traitsDisc], legend = FALSE,
standardize = FALSE, fsize = 0.3)
#title(main = paste(namesImage, "Discr"))
}
}
dev.off()
}
graphics.off() #sure everything is close
for(d in 1:length(dir_list_table)){
pathMissingData <- paste(dir_list_table[d], "MissingData", sep = "/")
filesInFolder <- list.files(pathMissingData)
#SimulationsInFolder <- loadReplicates(1, filesInFolder, pathCSV)
CSVinFolder <- list.files(path = pathCSV, pattern = "*.csv")
CSVname <- unique(gsub("\\.csv", "", CSVinFolder))
dir.create(paste(dir_list_table[d], "MissingDataDistribution", sep = "/"), showWarnings = FALSE)
pathSave <- paste(dir_list_table[d], "MissingDataDistribution", sep = "/")
for(c in 1:(length(CSVinFolder))){
c <- 1
missingDataInFolder <- loadReplicates(c, filesInFolder, pathCSV)
randomSimulation <- sample(length(missingDataInFolder), 3)
missDataName <- unique(gsub("\\.RData", "", missingDataInFolder))
pattern = "NaNData"
missDataName <- str_remove(missDataName, pattern)
pdf(paste0(pathSave, "/", CSVname[c], "_MissingDataDist", ".pdf"), width = 10, height = 7)
for(r in randomSimulation){
missData <- get(load(paste0(pathMissingData, "/", missingDataInFolder[r])))
NaNData <- missData$DataNaN
for(rdn in 1:length(NaNData)){
#case MAR empty
if(length(NaNData[[rdn]]) == 0){
next
}
else{
partition <- NaNData[[rdn]][[1]]
}
title <- names(partition)
plot(vis_miss(partition), main = title)
}
}
dev.off()
}
}
for(d in 1:length(dir_list_table)){
pathMissingData <- paste(dir_list_table[d], "MissingData", sep = "/")
filesInFolder <- list.files(pathMissingData)
#SimulationsInFolder <- loadReplicates(1, filesInFolder, pathCSV)
CSVinFolder <- list.files(path = pathCSV, pattern = "*.csv")
CSVname <- unique(gsub("\\.csv", "", CSVinFolder))
dir.create(paste(dir_list_table[d], "MissingDataDistribution", sep = "/"), showWarnings = FALSE)
pathSave <- paste(dir_list_table[d], "MissingDataDistribution", sep = "/")
for(c in 1:(length(CSVinFolder))){
c <- 1
missingDataInFolder <- loadReplicates(c, filesInFolder, pathCSV)
randomSimulation <- sample(length(missingDataInFolder), 3)
SimulationsInFolder <- SimulationsInFolder[str_detect(SimulationsInFolder, paste0(CSVname[c], "_"))]
randomSimulation <- sample(length(SimulationsInFolder), 1)
missDataName <- unique(gsub("\\.RData", "", missingDataInFolder))
pattern = "NaNData"
missDataName <- str_remove(missDataName, pattern)
pdf(paste0(pathSave, "/", CSVname[c], "_MissingDataDist", ".pdf"), width = 10, height = 7)
for(r in randomSimulation){
missData <- get(load(paste0(pathMissingData, "/", missingDataInFolder[r])))
NaNData <- missData$DataNaN
for(rdn in 1:length(NaNData)){
#case MAR empty
if(length(NaNData[[rdn]]) == 0){
next
}
else{
partition <- NaNData[[rdn]][[1]]
}
title <- names(partition)
plot(vis_miss(partition), main = title)
}
}
dev.off()
}
}
pathMissingData <- paste(dir_list_table[d], "MissingData", sep = "/")
pathMissingData <- paste(dir_list_table[d], "MissingData", sep = "/")
filesInFolder <- list.files(pathMissingData)
#SimulationsInFolder <- loadReplicates(1, filesInFolder, pathCSV)
CSVinFolder <- list.files(path = pathCSV, pattern = "*.csv")
CSVname <- unique(gsub("\\.csv", "", CSVinFolder))
missingDataInFolder <- loadReplicates(c, filesInFolder, pathCSV)
randomSimulation <- sample(length(missingDataInFolder), 3)
missingDataInFolder <- missingDataInFolder[str_detect(missingDataInFolder, paste0(CSVname[c], "_"))]
randomSimulation <- sample(length(SimulationsInFolder), 1)
missDataName <- unique(gsub("\\.RData", "", missingDataInFolder))
pattern = "NaNData"
missDataName <- str_remove(missDataName, pattern)
for(d in 1:length(dir_list_table)){
pathMissingData <- paste(dir_list_table[d], "MissingData", sep = "/")
filesInFolder <- list.files(pathMissingData)
#SimulationsInFolder <- loadReplicates(1, filesInFolder, pathCSV)
CSVinFolder <- list.files(path = pathCSV, pattern = "*.csv")
CSVname <- unique(gsub("\\.csv", "", CSVinFolder))
dir.create(paste(dir_list_table[d], "MissingDataDistribution", sep = "/"), showWarnings = FALSE)
pathSave <- paste(dir_list_table[d], "MissingDataDistribution", sep = "/")
for(c in 1:(length(CSVinFolder))){
missingDataInFolder <- loadReplicates(c, filesInFolder, pathCSV)
missingDataInFolder <- missingDataInFolder[str_detect(missingDataInFolder, paste0(CSVname[c], "_"))]
randomSimulation <- sample(length(SimulationsInFolder), 1)
missDataName <- unique(gsub("\\.RData", "", missingDataInFolder))
pattern = "NaNData"
missDataName <- str_remove(missDataName, pattern)
pdf(paste0(pathSave, "/", CSVname[c], "_MissingDataDist", ".pdf"), width = 10, height = 7)
for(r in randomSimulation){
missData <- get(load(paste0(pathMissingData, "/", missingDataInFolder[r])))
NaNData <- missData$DataNaN
for(rdn in 1:length(NaNData)){
#case MAR empty
if(length(NaNData[[rdn]]) == 0){
next
}
else{
partition <- NaNData[[rdn]][[1]]
}
title <- names(partition)
plot(vis_miss(partition), main = title)
}
}
dev.off()
}
}
pathSave <- paste(dir_list_table[d], "MissingDataDistribution", sep = "/")
pathSave
missingDataInFolder <- loadReplicates(c, filesInFolder, pathCSV)
missingDataInFolder <- missingDataInFolder[str_detect(missingDataInFolder, paste0(CSVname[c], "_"))]
randomSimulation <- sample(length(SimulationsInFolder), 1)
missDataName <- unique(gsub("\\.RData", "", missingDataInFolder))
pattern = "NaNData"
missDataName <- str_remove(missDataName, pattern)
r <- 1
missData <- get(load(paste0(pathMissingData, "/", missingDataInFolder[r])))
NaNData <- missData$DataNaN
for(r in randomSimulation){
missData <- get(load(paste0(pathMissingData, "/", missingDataInFolder[r])))
NaNData <- missData$DataNaN
for(rdn in 1:length(NaNData)){
#case MAR empty
if(length(NaNData[[rdn]]) == 0){
next
}
else{
partition <- NaNData[[rdn]][[1]]
}
title <- names(partition)
plot(vis_miss(partition), main = title)
}
}
r
randomSimulation
for(c in 1:(length(CSVinFolder))){
missingDataInFolder <- loadReplicates(c, filesInFolder, pathCSV)
missingDataInFolder <- missingDataInFolder[str_detect(missingDataInFolder, paste0(CSVname[c], "_"))]
randomSimulation <- sample(length(missingDataInFolder), 1)
missDataName <- unique(gsub("\\.RData", "", missingDataInFolder))
pattern = "NaNData"
missDataName <- str_remove(missDataName, pattern)
pdf(paste0(pathSave, "/", CSVname[c], "_MissingDataDist", ".pdf"), width = 10, height = 7)
for(r in randomSimulation){
missData <- get(load(paste0(pathMissingData, "/", missingDataInFolder[r])))
NaNData <- missData$DataNaN
for(rdn in 1:length(NaNData)){
#case MAR empty
if(length(NaNData[[rdn]]) == 0){
next
}
else{
partition <- NaNData[[rdn]][[1]]
}
title <- names(partition)
plot(vis_miss(partition), main = title)
}
}
dev.off()
}
?ladderize
#plot data distribution
dir_list_Overall <- list.dirs("UNIFR/Master_thesis/Scripts/Phylo_Imputation/Phylo_Imputation/Simulations", recursive = F)
dir_list_Overall
#isolate only Table directories
dir_list_Overall_Split <- str_split(dir_list_Overall, "/", simplify = TRUE)
nbrTraits <- "10T"
library(phytools)
library(tidyverse)
library(ggplot2)
library(reshape2)
library(visdat)
#plot data distribution
dir_list_Overall <- list.dirs("UNIFR/Master_thesis/Scripts/Phylo_Imputation/Phylo_Imputation/Simulations", recursive = F)
dir_list_Overall
#isolate only Table directories
dir_list_Overall_Split <- str_split(dir_list_Overall, "/", simplify = TRUE)
nbrTraits <- "10T"
tableIndexDir <- which(str_detect(dir_list_Overall_Split[ ,7], pattern = nbrTraits))
dir_list_table <- dir_list_Overall[tableIndexDir]
dir_list_table
d <- 1
pathSimulation <- paste(dir_list_table[d], "FullData", sep = "/")
filesInFolder <- list.files(pathSimulation)
pathCSV <- "UNIFR/Master_thesis/Scripts/csv/"
#SimulationsInFolder <- loadReplicates(1, filesInFolder, pathCSV)
CSVinFolder <- list.files(path = pathCSV, pattern = "*.csv")
CSVname <- unique(gsub("\\.csv", "", CSVinFolder))
dir.create(paste(dir_list_table[d], "DataDistribution", sep = "/"), showWarnings = FALSE)
pathSave <- paste(dir_list_table[d], "DataDistribution", sep = "/")
for(c in 1:(length(CSVinFolder))){
SimulationsInFolder <- loadReplicates(c, filesInFolder, pathCSV)
SimulationsInFolder <- SimulationsInFolder[str_detect(SimulationsInFolder, paste0(CSVname[c], "_"))]
randomSimulation <- sample(length(SimulationsInFolder), 1)
simDataName <- unique(gsub("\\.RData", "", SimulationsInFolder))
pattern = "simulatedData"
simDataName <- str_remove(simDataName, pattern)
pdf(paste0(pathSave, "/", CSVname[c],"_SimulatedDataDist", ".pdf"), width = 10, height = 7)
for(r in randomSimulation){
simData <- get(load(paste0(pathSimulation, "/", SimulationsInFolder[r])))
tree <- simData$TreeList$`0`
traits <- simData$FinalData
traitsConti <- grep("F.", names(traits))
traitsDisc <- grep("I.", names(traits))
if(length(traitsConti) != 0){
namesImage <- paste0("ContiDist", simDataName[d], ".pdf")
phylo.heatmap(ladderize(tree), traits[, traitsConti], standardize=TRUE, split=c(0.7,0.3), fsize=c(0.4,0.8,0.8))
#title(main = paste(namesImage, "Conti"))
}
if(length(traitsDisc) != 0){
namesImage <- paste0("TraitsDist", simDataName[d], ".pdf")
dotTree(ladderize(tree), traits[, traitsDisc], legend = FALSE,
standardize = FALSE, fsize = 0.3)
#title(main = paste(namesImage, "Discr"))
}
}
dev.off()
}
plot(tree)
SimulationsInFolder
library(TDIP)
library(TDIP)
citation(TDIP)
citation("TDIP")
empData <- read.table("C:/Users/Matthieu/Documents/UNIFR/Master_thesis/EmpData/shark.traits.common_sp.csv", header = T, sep = "\t")
empData <- TDIP::data_preprocessing(empData)
load("C:/Users/Matthieu/Documents/UNIFR/Master_thesis/EmpData/result19mixed.RData")
imputedData <- empData$FinalData
imputedData[, 7:ncol(imputedData)] <- saveData$imputedData$HV.ML_mixed
#write.table(imputedData, "C:/Users/Matthieu/Documents/UNIFR/Master_thesis/EmpData/shark.traits.common_sp.imputed.csv", row.names = F, sep = "\t")
str(imputedData)
library(rfishbase)
#setwd("C:/Users/Matthieu/Documents/UNIFR/Master_thesis/Scripts/")
library(TDIP)
data <- read.csv("../Documents/UNIFR/Master_thesis/Scripts/csv/DiscreteARD1IndeData.csv")
data <- read.csv("../Documents/UNIFR/Master_thesis/Scripts/csv/DiscreteARD1IndeData.csv", head = T)
missingRates <- 0.33
gain <- FALSE
replicateNbr <- 1
#tree parameters
tree_arg <- list(Birth = 0.4, Death = 0.1, Ntaxa = 100)
varfrac <- as.numeric(0.95)
#strategies can be "NP", "P" or "2-step"
strategies <- c("NP", "P", "2-step")
ImputationApproachesNames <- c("mice_phylo", "missForest_phylo", "kNN_phylo")
files <- list.files("../csv/")
files
files <- list.files("UNIFR/Master_thesis/Scripts/csv/")
files
files <- list.files("UNIFR/Master_thesis/Scripts/csv/", pattern = "inde")
files
files <- list.files("UNIFR/Master_thesis/Scripts/csv/", pattern = "Inde")
for (i in 1:length(files)){
datasetList[[i]] <- read.csv(paste0(""UNIFR/Master_thesis/Scripts/csv/"",files[i]), header = T, sep = ";")
}
for (i in 1:length(files)){
datasetList[[i]] <- read.csv(paste0("UNIFR/Master_thesis/Scripts/csv/",files[i]), header = T, sep = ";")
}
datasetList <- list()
for (i in 1:length(files)){
datasetList[[i]] <- read.csv(paste0("UNIFR/Master_thesis/Scripts/csv/",files[i]), header = T, sep = ";")
}
datasetList[[1]]
datasetList[[2]]
datasetList[[3]]
datasetList <- list()
for (i in 1:length(files)){
datasetList[[i]] <- read.csv(paste0("UNIFR/Master_thesis/Scripts/csv/",files[i]), header = T, sep = ";")
}
datasetList[[1]]
names(datasetList[[1]])
files <- list.files("UNIFR/Master_thesis/Scripts/csv/", pattern = "Inde")
files
datasetList <- list()
for (i in 1:length(files)){
datasetList[[i]] <- read.csv(paste0("UNIFR/Master_thesis/Scripts/csv/",files[i]), header = T, sep = ";")
}
datasetList[[1]]
datasetList[[2]]
datasetList[[3]]
files <- list.files("UNIFR/Master_thesis/Scripts/csv/")
for (i in 1:length(files)){
datasetList[[i]] <- read.csv(paste0("UNIFR/Master_thesis/Scripts/csv/",files[i]), header = T, sep = ";")
}
datasetList[[1]]
datasetList[[2]]
datasetList[[3]]
datasetList[[4]]
datasetList[[5]]
files <- list.files("UNIFR/Master_thesis/Scripts/csv/", pattern = "Inde")
datasetList <- list()
for (i in 1:length(files)){
datasetList[[i]] <- read.csv(paste0("UNIFR/Master_thesis/Scripts/csv/",files[i]), header = T, sep = ";")
}
datasetList[[1]]
data <- 1
nameSimulation <- "test"
simulatedData <- TDIP::data_simulator(tree_arg,
datasetList[[data]],
save = nameSimulation)
simulatedData <- TDIP::data_simulator(tree_arg,datasetList[[1]], save = "test")
NaNData <- TDIP::na_insertion(missingRates,
dataset = simulatedData$FinalData,
missingTraits = ncol(simulatedData$FinalData),
MARTraits = 1,
MARctrlTraits = NULL,
traitsNoNA = NULL,
tree = simulatedData$TreeList$`0`,
save = nameNaNSimulation)
NaNData <- TDIP::na_insertion(missingRates,
dataset = simulatedData$FinalData,
missingTraits = ncol(simulatedData$FinalData),
MARTraits = 1,
MARctrlTraits = NULL,
traitsNoNA = NULL,
tree = simulatedData$TreeList$`0`,
save = NULL)
getwd()
missingData <- NaNData$DataNaN$MCAR$`MCAR/13/0.33`
ImputedMICE <- NADIA::autotune_mice(missingData, m = 1, maxit = 5, printFlag = FALSE)
ImputedMICE <- NADIA::autotune_mice(missingData, m = 1, maxit = 5)
names(missingData) <- paste0("A",as.character(1:ncol(missingData)))
ImputedMICE <- NADIA::autotune_mice(missingData, m = 1, maxit = 5)
ImputedMICE
eigen <- get_eigenvec(simulatedData$TreeList$`0`, 0.95)
missingData <- cbind(missingData[, 1:ncol(missingData), drop = FALSE],
eigen[, 1:ncol(eigen), drop = FALSE])
names(missingData) <- paste0("A",as.character(1:ncol(missingData)))
eigen <- TDIP::get_eigenvec(simulatedData$TreeList$`0`, 0.95)
missingData <- cbind(missingData[, 1:ncol(missingData), drop = FALSE],
eigen[, 1:ncol(eigen), drop = FALSE])
names(missingData) <- paste0("A",as.character(1:ncol(missingData)))
ImputedMICE <- NADIA::autotune_mice(missingData, m = 1, maxit = 5)
ImputedMICE
warnings()
NADIA::autotune_VIM_kNN(missingData)
NADIA::autotune_missForest(missingData)
empData <- read.csv("C:/Users/Matthieu/Documents/UNIFR/Master_thesis/EmpData/fishbase_traitdata_corrected.csv", header = T)
#expert empirical data
empData$AnaCat[which(empData$AnaCat == " ")] <- NA
#discretize column DepthRangeDeep and length values
drD <- cut(empData$DepthRangeDeep, breaks = c(0, 199, Inf), labels = c(1:2))
lengthS <- cut(empData$Length, breaks =c(0, 149, 299, Inf), labels = c("Small", "Medium", "Large"))
data <- TDIP::data_preprocessing(empData, no.conv.factor = c(7, 9, 10))
rownames(data$FinalData) <- data$FinalData$Species
data$FinalData$Species <- NULL
data$FinalData$DepthRangeDeep <- drD
data$FinalData$Length <- lengthS
data$FinalData <- data$FinalData %>% mutate_if(is.integer, as.numeric)
library(ggpubr)
library(miscset)
library(stringr)
library(tidyverse)
library(geiger)
library(xtable)
library(dplyr)
data$FinalData <- data$FinalData %>% mutate_if(is.integer, as.numeric)
str(data$FinalData)
NADIA::autotune_mice(data$FinalData)
library(TDIP)
imputedValue <- do.call(MixedImputationApproaches[[method]], MixedImputationApproaches[[method + 1]])$imputedData
hint <- NULL
strategies <- sort(strategies) #order is "2-step", "NP", "P"
imputedData <- vector()
imputedNames <- c()
naColumns <- which(colSums(is.na(data)) > 0)
classVar <- lapply(data, class)
setwd("UNIFR/Master_thesis/Scripts/Phylo_Imputation/Phylo_Imputation/")
NaNData <- get(load("NaNDataDiscreteARD1IndeData_R120_0.33.RData"))
mecList <- vector("list", length(NaNData$DataNaN))
names(mecList) <- names(NaNData$DataNaN)
errorList <- vector("list", length(NaNData$DataNaN))
names(errorList) <- names(NaNData$DataNaN)
namesMethods <- c("MICE", "MissForest", "KNN") #select the method that we want to ensemble
mC <- 1
d <- 1
data <- NaNData$DataNaN[[mC]][[d]]
strategies <- c("NP")
ImputationApproachesNames <- c("mice_phylo", "missForest_phylo",
"kNN_phylo")
TDIP::missForest_phylo(data)
